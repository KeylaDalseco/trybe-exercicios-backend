O dia 1 da se√ß√£o 6 de backend inicia o conceito de sequelize, onde aprendemos a criar as 3 etapas importantes para utilizar o sequeleize: 
-> 1- Migrations
-> 2- Seeders
-> 3- models -> services -> controllers

Sendo assim:

1- Migrations √© respons√°vel pela cria√ß√£o do banco de dados, das tabelas e colunas.
2- Os seeders insere os dados iniciais de uma tabela.
3 - Os models s√£o as fun√ß√µes de escrita e leitura dos dados - CRUD.

Mas, para seu total funcionamento, √© importante fazer toda a instala√ß√£o do sequelize e configurar corretamente.


CONFIGURANDO O SEQUELIZE



1Ô∏è‚É£ Instala√ß√£o do Sequelize

‚û°Ô∏è Para come√ßar a usar o Sequelize, √© preciso iniciar uma aplica√ß√£o Node.js e instalar essa biblioteca ORM utilizando os seguintes comandos:

===============================================
mkdir app-with-sequelize && cd app-with-sequelize

npm init -y

npm install -E sequelize@6.3.4

===============================================


‚û°Ô∏è Crie o arquivo .env na raiz do projeto e preencha as vari√°veis com as suas credenciais para acessar o MySQL:

===============================================
MYSQL_USER=root
MYSQL_PASSWORD=senha_mysql
MYSQL_DATABASE=orm_example
MYSQL_HOST=localhost

===============================================
Note que a vari√°vel MYSQL_PASSWORD est√° com o valor senha_mysql, mas provavelmente a senha de acesso ao seu MySQL √© outra. Troque o valor dessa vari√°vel para que seja o mesmo que voc√™ utiliza para acessar o MySQL com o usu√°rio root.

‚ö†Ô∏èImportante: siga o passo a passo da instala√ß√£o do Sequelize junto com o conte√∫do, pois esse ser√° um exerc√≠cio de fixa√ß√£o importante.

‚û°Ô∏è O pr√≥ximo passo para utilizar o Sequelize √© instalar um CLI, que √© respons√°vel por gerar e executar as opera√ß√µes. Al√©m de instalar o CLI, tamb√©m precisamos instalar o mysql2, uma depend√™ncia necess√°ria para usarmos o MySQL com o Sequelize. Na pasta raiz da aplica√ß√£o, rode os comandos:

===============================================
npm install -D -E sequelize-cli@6.2.0

npm install -E mysql2@2.1.0

mkdir src
===============================================


2Ô∏è‚É£ Inicializa√ß√£o do Sequelize

‚û°Ô∏è Depois que instalamos o CLI, precisamos iniciar um projeto com o Sequelize. Para isso, vamos executar o seguinte comando dentro da pasta src:

===============================================
cd src

npx sequelize-cli init

===============================================


Esse comando vai criar as seguintes pastas:

config: cont√©m um arquivo de configura√ß√£o, com orienta√ß√µes para o CLI se conectar com o nosso banco de dados;

models: cont√©m todos os modelos da nossa aplica√ß√£o;

migrations: cont√©m todos os arquivos de migra√ß√£o da nossa aplica√ß√£o;

seeders: cont√©m todos os arquivos de ‚Äúseeds‚Äù (sementes que s√£o usadas para popular o banco).

‚û°Ô∏è O arquivo .sequelizerc

O arquivo .sequelizerc √© um arquivo de configura√ß√£o do Sequelize. Esse arquivo √© respons√°vel por configurar o caminho das pastas migrations, models, seeders e config que o Sequelize ir√° procurar ao executar um comando.

Por padr√£o, ao rodar um comando Sequelize os arquivos dentro das pastas de migrations, models, seeders e config seriam procurados somente na camada em que estiv√©ssemos executando o comando. No nosso caso, como estamos utilizando a pasta src para abrigar os arquivos do Sequelize, caso execut√°ssemos um comando diretamente na raiz da aplica√ß√£o, ir√≠amos nos deparar com um erro.

Podemos entrar na pasta src e executar estes comandos, como fizemos anteriormente, pois assim teremos √™xito. Mas caso fosse uma aplica√ß√£o maior, com mais camadas, aumentar√≠amos a complexidade de subir e configurar a aplica√ß√£o.

√â neste momento que entra em cena o arquivo .sequelizerc. Dessa forma, podemos construir um c√≥digo com uma arquitetura mais organizada. ‚≠ê

‚û°Ô∏è Antes de configurar esse arquivo, volte para a pasta raiz da aplica√ß√£o com o seguinte comando:

===============================================
cd ..
‚û°Ô∏è Agora crie um arquivo com o nome .sequelizerc com o seguinte conte√∫do:

===============================================
// app-with-sequelize/.sequelizerc

const path = require('path');

module.exports = {
  'config': path.resolve('src', 'config', 'config.js'),
  'models-path': path.resolve('src', 'models'),
  'seeders-path': path.resolve('src', 'seeders'),
  'migrations-path': path.resolve('src', 'migrations'),
};

===============================================
‚ö†Ô∏è O arquivo .sequelizerc √© um arquivo de configura√ß√£o do Sequelize e deve ser criado na pasta raiz. Nesse caso, a pasta app-with-sequelize.

Vamos entender melhor as informa√ß√µes deste arquivo:

path: √© um m√≥dulo interno do Node que nos fornece alguns utilit√°rios para trabalharmos com caminhos de arquivos e diret√≥rios;

config: √© um caminho para o arquivo de configura√ß√£o;

models-path: √© um caminho para o diret√≥rio de models;

seeders-path: √© um caminho para o diret√≥rio de seeders;

migrations-path: √© um caminho para o diret√≥rio de migrations.




3Ô∏è‚É£ Conex√£o com o banco de dados

‚û°Ô∏è Agora precisamos configurar o arquivo config.json gerado pelo init do CLI. Ao alterar esse arquivo, estamos configurando o acesso da aplica√ß√£o ao nosso banco de dados.

‚û°Ô∏è Note que o arquivo config.json, localizado no diret√≥rio ./src/config, cont√©m informa√ß√µes sens√≠veis, como credenciais de acesso ao banco de dados, expostas no nosso c√≥digo. Uma boa pr√°tica √© substituir os valores por vari√°veis de ambiente, n√£o expondo assim, informa√ß√µes sens√≠veis relacionados √† configura√ß√£o geral da aplica√ß√£o. Ent√£o, vamos fazer isso do jeito certo!

‚û°Ô∏è Mudaremos o nome do nosso arquivo config.json para config.js

‚û°Ô∏è Retiraremos todo o conte√∫do de config.js e substituiremos pelo c√≥digo abaixo:



===============================================
// src/config/config.js

const config = {
  username: process.env.MYSQL_USER,
  password: process.env.MYSQL_PASSWORD,
  database: process.env.MYSQL_DATABASE,
  host: process.env.MYSQL_HOST,
  dialect: 'mysql',
};

module.exports = {
  development: config,
  test: config,
  production: config,
};

===============================================


Note que vamos assumir que os tr√™s ambientes v√£o utilizar configura√ß√µes semelhantes. Em aplica√ß√µes mais complexas, no entanto, √© poss√≠vel que voc√™ utilize bancos de dados e configura√ß√µes diferentes para cada ambiente. Nesses casos, elas devem ser configuradas por meio de vari√°veis de ambiente.

‚û°Ô∏è Vamos entender melhor as informa√ß√µes que estamos passando:

username: usu√°rio de acesso ao banco de dados;

password: senha de acesso ao banco de dados;

database: nome do banco de dados no qual queremos conectar;

host: servidor no qual estamos conectando - por ser local, utilizamos o endere√ßo IP 127.0.0.1, ou seu alias localhost;

dialect: informa qual a biblioteca que o sequelize utiliza para se conectar ao banco de dados estamos utilizando. Nesse caso, mysql.

‚û°Ô∏è Modifique o arquivo src/models/index.js para apontar para o arquivo config.js:

Para fazer isso, busque neste arquivo, a seguinte linha de c√≥digo:

===============================================
// antes estava assim
const config = require(__dirname + '/../config/config.json')[env]; // configura√ß√£o antiga
Altere esta linha para ficar assim:

// agora atualize assim:
/* Praticamente √© s√≥ mudar a extens√£o de .json para .js! */
const config = require(__dirname + '/../config/config.js')[env]; // configura√ß√£o nova
// ...
===============================================


‚û°Ô∏è Antes de rodar os comandos Sequelize, precisamos garantir que temos uma inst√¢ncia do MySQL rodando.

Caso voc√™ j√° tenha um container com uma imagem do MySQL, pode utiliz√°-lo ou usar o comando abaixo no terminal para criar e rodar um:

‚ö†Ô∏è Garanta que a senha do banco esteja de acordo com a presente no .env. üòâ

===============================================
docker container run --name container-mysql -e MYSQL_ROOT_PASSWORD=senha_mysql -d -p 3306:3306 mysql:8.0.29
===============================================



4Ô∏è‚É£ Cria√ß√£o do banco de dados usando o CLI do Sequelize

‚û°Ô∏èAgora que iniciamos uma aplica√ß√£o do Sequelize e a nossa inst√¢ncia do MySQL est√° rodando, podemos criar o banco de dados orm_example (que nomeamos no .env) na raiz do projeto:

===============================================
env $(cat .env) npx sequelize db:create

===============================================


NOTA: o comando env $(cat .env) ir√° realizar a leitura das vari√°veis do arquivo .env e repass√°-las para o pr√≥ximo comando, disponibilizando assim os valores das vari√°veis de ambiente para o seu c√≥digo atrav√©s do process.env.NOME_DA_VARIAVEL.

De olho na dica üëÄ: O .sequelizerc procura os arquivos de configura√ß√£o do Sequelize no diret√≥rio src. Por isso, √© importante que voc√™ esteja na raiz do projeto quando for rodar os comandos do Sequelize.

No seu terminal, o Sequelize vai avisar que o database foi criado. Voc√™ pode verificar isso no pr√≥prio MySQL utilizando os comandos abaixo:

‚û°Ô∏è Execute o container criado anteriormente com o comando:

===============================================
docker exec -it container-mysql bash

===============================================
‚û°Ô∏è Entre no terminal do mysql com o comando:

===============================================
mysql -u root -p
===============================================

‚û°Ô∏è Digite a sua senha de acesso ao mysql e em seguida rode o comando abaixo:

===============================================
show databases;
===============================================
‚û°Ô∏è Perceba que, a partir desses passos, o banco orm_example foi criado e voc√™ n√£o precisou escrever nenhuma linha de SQL para isso. Essa √© uma das primeiras vantagens que o Sequelize nos oferece. ‚≠ê